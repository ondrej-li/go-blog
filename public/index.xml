<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jazyk #Go(lang)</title>
    <link>https://go.ondralinek.cz/</link>
    <description>Recent content on Jazyk #Go(lang)</description>
    <generator>Hugo</generator>
    <language>cs-CZ</language>
    <lastBuildDate>Mon, 17 Dec 2018 08:13:37 +0000</lastBuildDate>
    <atom:link href="https://go.ondralinek.cz/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Mage - kompilace</title>
      <link>https://go.ondralinek.cz/post/mage-2/</link>
      <pubDate>Mon, 17 Dec 2018 08:13:37 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/mage-2/</guid>
      <description>&lt;p&gt;V minulém díle jsme se podívali na nástroj &lt;a href=&#34;https://magefile.org/&#34;&gt;mage&lt;/a&gt; a jeho použití pro sestavování #Go programů. Tentokrát se podíváme na jednu specialitku, která asi nebyla předem zřejmá, ale rozhodně stojí za prozkoumání.&lt;/p&gt;&#xA;&lt;p&gt;Jak z minula víte, &lt;code&gt;mage&lt;/code&gt; potřebuje tzv. &lt;code&gt;magefile&lt;/code&gt;. Magefile je vlastně go-skript na stereoidech. Pokud tedy chceme sestavit projekt, který používá &lt;code&gt;magefile&lt;/code&gt;, tak zadáme na příkazovou řádku něco jako &lt;code&gt;mage&lt;/code&gt; a máme hotovo (když je tedy definovaný defaultní cíl). Pokud bychom ovšem chtěli, aby se náš projekt takto pěkně spustil na našem CD/CI serveru, tak budeme muset přidat ještě něco - instalaci samotného &lt;code&gt;mage&lt;/code&gt;. Takže náš skript by vypadal jako&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mage - nástroj pro sestavování (nejen) Go programů</title>
      <link>https://go.ondralinek.cz/post/mage/</link>
      <pubDate>Thu, 13 Dec 2018 11:17:07 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/mage/</guid>
      <description>&lt;p&gt;Sastavování (kompilace + linkování) v Go je jedna z věcí, kde vládne organizovaný chaos. Samozřejmě &lt;code&gt;go build&lt;/code&gt; prostě funguje. Ale v dnešní době je potřeba dělat mnohem víc věcí, než prosté &lt;code&gt;go build&lt;/code&gt;. Bohužel nějaký standardní způsob neexistuje. Jelikož jsem odkojený Un*xem, tak preferuji nástroje, které se samy nabízejí - &lt;code&gt;make&lt;/code&gt;. Člověk si udělá &lt;code&gt;makefile&lt;/code&gt; a je spokojený - jako &lt;a href=&#34;https://github.com/defectus/glutton/blob/master/makefile&#34;&gt;například tento&lt;/a&gt;. Nevýhodou makefilů je, že ne všichni jim rozumí, a i ti, kdo jim rozumí, obecně neznají všechny finty. Ruku na srdce, kdo ví, co dělá na příklad toto &lt;code&gt;go fmt $$(go list ./... | grep -v /vendor/)&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Seriál o Go na root.cz</title>
      <link>https://go.ondralinek.cz/post/serial-o-go/</link>
      <pubDate>Wed, 21 Nov 2018 05:06:03 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/serial-o-go/</guid>
      <description>&lt;p&gt;Včera začal vycházet velmi slibný seriál o #Go na &lt;a href=&#34;https://www.root.cz/clanky/go-minimalisticky-a-prekvapive-vykonny-programovaci-jazyk/&#34;&gt;root.cz&lt;/a&gt; od Pavla Tišnovského.&lt;/p&gt;&#xA;&lt;p&gt;Vřele doporučuji!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Struktura programu 2 roky po té</title>
      <link>https://go.ondralinek.cz/post/struktura-programu-2-roky-po-te/</link>
      <pubDate>Tue, 06 Nov 2018 06:23:00 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/struktura-programu-2-roky-po-te/</guid>
      <description>&lt;p&gt;Jsou to již více než dva roky, co jsem se v tomto &lt;a href=&#34;post/struktura-programu-po-druhe/&#34;&gt;článku&lt;/a&gt; rozepsal nad strukturou programu v #Go. A jelikož s časem rostou zkušenosti myslím, že je čas popsat, co se od té doby změnilo a jak strukturuju programy teď.&lt;/p&gt;&#xA;&lt;p&gt;V první řadě nám #Go podporuje moduly, tedy od verze 1.11. Takže když začnu nový projekt, okamžitě dělám &lt;code&gt;go mod init&lt;/code&gt;. Moduly ovšem nelze použít na &lt;code&gt;$GOPATH&lt;/code&gt;, takže je potřeba se jí vyhnout. Ovšem nic vám nebrání pracovat jako dříve, být na &lt;code&gt;$GOPATH&lt;/code&gt; a používat na správu závislostí něco jiného - třeba &lt;code&gt;dep&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mini služby</title>
      <link>https://go.ondralinek.cz/post/mini-service/</link>
      <pubDate>Wed, 17 Oct 2018 13:11:00 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/mini-service/</guid>
      <description>&lt;p&gt;Píšety monolity? Pak možná máte jeden problém, ale za to velký.&lt;/p&gt;&#xA;&lt;p&gt;Píšete micro-servicy? Pak možná máte mnoho problémů, ale menších.&lt;/p&gt;&#xA;&lt;p&gt;Co takhle psát miniservicy? To byste měli trochu běžných problémů. Prostě zlatá střední cesta.&lt;/p&gt;&#xA;&lt;p&gt;Co je to miniservice. Je to něco většího než mikroservice, má řekněme 10-20 endpointů, popř. stejný počet gRPC, či jiných endpointů. Zachovává si tedy určité rysy microservice, ale přitom se z ní nestává monolit. Správa farmy miniservice je tedy přeci jen jednodušší, přitom když jedna spadne, je možné ji rychle nahodit a nespadne kvůli tomu zbytek služeb.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Smutný den pro #Go</title>
      <link>https://go.ondralinek.cz/post/smutny-den/</link>
      <pubDate>Wed, 10 Oct 2018 12:50:00 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/smutny-den/</guid>
      <description>&lt;p&gt;Nebojte, #Go nekončí, ba naopak, bohužel už je tak velké, že se objevují vykukové, co svojí &amp;ldquo;chytrostí&amp;rdquo; odrovnají kdejaký jazyk, nebo technologii.&lt;/p&gt;&#xA;&lt;p&gt;O čem mluvím. Tento článek na blogu #Go &lt;a href=&#34;https://blog.golang.com/wire&#34;&gt;https://blog.golang.com/wire&lt;/a&gt; propaguje výhody DI (dependency injection). Ano, 20 let stará technologie, která spolehlivě odbourala Javu, a teď přichází ke #Go.&lt;/p&gt;&#xA;&lt;p&gt;Rozhodně se nejedná o první pokus, nebo nápad tohoto typu. Řekl bych, že snad každý člověk přicházející ke #Go z Javy dostane tento nápad, ale tentokrát je to poprvé, co se to dostalo na tak prominentní místo.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Reflexe v #Go</title>
      <link>https://go.ondralinek.cz/post/reflexe/</link>
      <pubDate>Thu, 04 Oct 2018 07:21:00 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/reflexe/</guid>
      <description>&lt;p&gt;V tomto příspěvku se podíváme na to, co to je reflexe, na co se používá a hlavně jak se používá. Hned z kraje jedna moudrá hláška&lt;/p&gt;&#xA;&lt;h4 id=&#34;zřejmé-je-vždy-lepší-než-chytré--a-reflexe-není-nikdy-zřejmá&#34;&gt;Zřejmé je vždy lepší než chytré &amp;hellip; a reflexe není nikdy zřejmá.&lt;/h4&gt;&#xA;&lt;p&gt;Takže varování hned na úvod - reflexe ano, ale musíte k tomu mít dobrý důvod.&lt;/p&gt;&#xA;&lt;p&gt;O co se tedy jedná. Reflexe je schopnost zjišťovat si informace a typech a hodnotách dat za běhu programu. Ti kdo se s reflexí ještě nesetkali se možná ptají proč. Vždyť přeci kompilátor ví, jakého typu hodnoty jsou a za běhu není problém se k nim dostat. To je sice pravda, ale v okamžiku, kdy do svého kódu přidáte abstrakci, tedy interfacy, a nedej bože prázdné interfacy, už ani vy, ani kompilátor neví, jakého typu je proměnná a tím pádem nemáte možnost se ani zeptat na její hodnotu.&lt;/p&gt;</description>
    </item>
    <item>
      <title>1.9.3</title>
      <link>https://go.ondralinek.cz/post/1-9-3/</link>
      <pubDate>Tue, 23 Jan 2018 13:06:03 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/1-9-3/</guid>
      <description>&lt;p&gt;Dnes byly vydána nová verze Go 1.9.3. Jedná se pouze o opravy celkem nepodstatných chyb, ale nikdy není na škodu upgradovat.&lt;/p&gt;&#xA;&lt;p&gt;Jako vždy stačí stáhnout z &lt;a href=&#34;https://golang.org/dl/&#34;&gt;https://golang.org/dl/&lt;/a&gt;, nebo počkat, až se &lt;em&gt;Go&lt;/em&gt; objeví v repu vaší oblíbené distribuce.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go vercajk</title>
      <link>https://go.ondralinek.cz/post/go-vercajk/</link>
      <pubDate>Sat, 11 Nov 2017 06:52:47 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/go-vercajk/</guid>
      <description>&lt;p&gt;Jelikož stále nejsem schopný dát dohromady návod na šifrování v Go (skončil jsem u nástřelu, ale nedaří se mi ho dokončit), tak se posunu na další kapitolu a tou je váš/náš vercajk při práci s Go.&lt;/p&gt;&#xA;&lt;p&gt;Každý jazyk má svoji sadu nářadí (tooling) se kterou se pracuje. Například Java. Pokud chci pracovat v Javě, tak je skoro jisté, že jako IDE použiji Ideu, nebo Eclipse, programy budu sestavovat pomocí mavenu, nebo gradlu, testovat budu např. JUnit, nejspíš se vykašlu na všechny možný experimenty a použiji Spring na všechno. Co je ale hlavní, máte relativně velký výběr a nic vás nebrání zkoušet jiné nástroje a postupy.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Throttling v Go</title>
      <link>https://go.ondralinek.cz/post/throttling-v-go/</link>
      <pubDate>Tue, 19 Sep 2017 06:07:45 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/throttling-v-go/</guid>
      <description>&lt;p&gt;Throttling je způsob, jak omezit počet běžících vláken. Pokud chceme, abychom nezahltili druhý systém (subsystém) nekontrolovaným množství paralelních volání, potřebujeme způsob, jak omezit počet běžících go rutin.&lt;/p&gt;&#xA;&lt;p&gt;Určitě je mnoho způsobů, jak toho docílit, nabízím zde jeden, který se mi osvědčil.&lt;/p&gt;&#xA;&lt;p&gt;V zásadě vycházím z toho, že zápis do kanálu blokuje, pokud je překrečena kapacita bufferu kanálu.&lt;/p&gt;&#xA;&lt;p&gt;Tedy&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make(&lt;span style=&#34;color:#66d9ef&#34;&gt;chan&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// OK&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;ch&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#75715e&#34;&gt;// blokuje, dokuď někdo kanál nepřečte&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Tento konkrétní příklad vám neprojde, samotné Go detekuje deadlock (zápis bez čtení v jediné go rutině) a radši program zabije.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Golang a kryptografie</title>
      <link>https://go.ondralinek.cz/post/golang-a-kryptografie/</link>
      <pubDate>Tue, 18 Jul 2017 17:47:50 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/golang-a-kryptografie/</guid>
      <description>&lt;p&gt;Dnes si povíme něco o tom, jak funguje kryptografie v Go. Go jako (relativně) nový programovací je v této oblasti daleko a podporuje prakticky všechny možné šifry a řešení. Co je ale na osvěžující je fakt, že Go se stále snaží dělat věci jednoduše, takže na rozdíl od jiných nejmenovaných jazyků se zde nesetkáme s milionem interfaců a object factory.&lt;/p&gt;&#xA;&lt;p&gt;Kryptografie je opravdu obsáhlý prostor, takže my si ukážeme použitelné a praktické implementace kryptografie.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generics v Golang</title>
      <link>https://go.ondralinek.cz/post/generics-v-golang/</link>
      <pubDate>Wed, 21 Jun 2017 12:59:02 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/generics-v-golang/</guid>
      <description>&lt;p&gt;Poslední dobou je možné sledovat na poli jazyka &lt;em&gt;Go&lt;/em&gt; zajímavou bitvu. Jak se blíží Go verze &lt;code&gt;2.0&lt;/code&gt; (a pozor, po &lt;code&gt;1.9&lt;/code&gt; může klidně přijít &lt;code&gt;1.10&lt;/code&gt;), tak se začínají objevovat nápady typu &amp;ldquo;přidejme do jazyka generické typy&amp;rdquo;. Nejdřív jsem i já stál na generické straně barikády, ale musím uznat, že postupem času se spíš kloním ke skupině genericsů méně, nebo třeba vůbec ne. Možná bych chtěl na toto téma rozvířit debatu, takže zde je můj pohled na věc.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Výčtové typy</title>
      <link>https://go.ondralinek.cz/post/vyctove-typy/</link>
      <pubDate>Fri, 12 May 2017 07:35:51 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/vyctove-typy/</guid>
      <description>&lt;p&gt;Určitě to víte - Go nepodporuje výčtové typy - tedy &lt;code&gt;enum&lt;/code&gt;. Go umí numerické sekvence pomocí &lt;code&gt;iota&lt;/code&gt;, ale to se opravdu nerovná enumu. Když jsem se nedávno na projektu vrátil ke staršímu kódu (který jsem napsal), tak jsem si uvědomil, že v jedné chvíli jsem vlastně použil něco, co může fungovat jako náhrada za výčty. No posuďte sami.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AnswerEnum&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;Yes&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;AnswerEnum&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;AnswerEnum&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;No&lt;/span&gt;  &lt;span style=&#34;color:#a6e22e&#34;&gt;AnswerEnum&lt;/span&gt; = &lt;span style=&#34;color:#a6e22e&#34;&gt;AnswerEnum&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#a6e22e&#34;&gt;AnswerEnum&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;AnswerEnum&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Yes&amp;#34;&lt;/span&gt;}, &lt;span style=&#34;color:#a6e22e&#34;&gt;AnswerEnum&lt;/span&gt;{&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;No&amp;#34;&lt;/span&gt;}}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;answer&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cond&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;answer&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Yes&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;na indexu&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;je hodnota&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Yes&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;No&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;na indexu&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;i&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;je hodnota&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;No&lt;/span&gt;.&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;To co se zde děje je zjevné. Nejdříve si vytvoříme nový typ typu &lt;code&gt;AnswerEnum&lt;/code&gt;, který je kompozicí typu &lt;code&gt;string&lt;/code&gt;. Jelikož lze stringy mezi sebou porovnávat, tak je pak možné použít tyto hodnoty v bloku &lt;code&gt;switch&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jak si udělat transakční databázi</title>
      <link>https://go.ondralinek.cz/post/jak-si-udelat-transakcni-databazi/</link>
      <pubDate>Thu, 13 Apr 2017 12:29:57 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/jak-si-udelat-transakcni-databazi/</guid>
      <description>&lt;p&gt;Určitě jste si toho všimli - Go má (podle mě) velmi dobrou podporu relačních databází. A to včetně věcí typu transakce. Pokud chcete ovšem transparentně přistupovat k databázi tak, aby vám bylo jedno, jestli dotaz provádíte v rámci transakce, nebo mimo ni, tak máte problém. Standardní API totiž rozlišuje mezi přímým dotazem do databáze a mezi dotazem v rámci transakce.&lt;/p&gt;&#xA;&lt;p&gt;Abychom tuto &amp;ldquo;podružnost&amp;rdquo; eliminovali, a také si ukázali jak si udělat abstrakční vrstvu nad konkrétní implementací, tak si napíšeme zaobalení (wrapper) databáze. Bude mít stejné funkce na provádění základních dotazů jako má standardní Go API.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rozdíl mezi kanálem prázdné struktury a kanálem prázdného interfacu</title>
      <link>https://go.ondralinek.cz/post/rozdil-mezi-kanalem-prazdne-struktury-a-kanalem-prazdneho-interfacu/</link>
      <pubDate>Sun, 02 Apr 2017 06:35:51 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/rozdil-mezi-kanalem-prazdne-struktury-a-kanalem-prazdneho-interfacu/</guid>
      <description>&lt;p&gt;Mnohdy si člověk myslí, že něco je naprosto jasné. Tedy až do okamžiku, kdy dostanete dotaz, který vám ukáže, že nejasnosti jsou na každém rohu.&lt;/p&gt;&#xA;&lt;p&gt;Zrovna teď se mně kolega ptal, jaký je rozdíl mezi kanálem prázdné struktury a kanálem prázdného interfacu.&lt;/p&gt;&#xA;&lt;p&gt;Odpověď je, že zásadní.&lt;/p&gt;&#xA;&lt;p&gt;Prázdná struktura jako typ má omezené, ale legální použití. Sama o sobě nemůže nést data (nemá žádné pole, kam se dalo cokoliv uložit), ale už její přítomnost nám umožňuje ji použít na místech, kde prostě potřebujeme &amp;ldquo;nějakou&amp;rdquo; proměnnou. Jako další místo použití vidím jako možnost zavěsit na tuto strukturu receivera (příjemce) a použít takto vytvořenou proměnnou jako parametr typu interface.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Předávání polí (sliců) hodnotou a na co si dát pozor</title>
      <link>https://go.ondralinek.cz/post/predavani-poli-slicu-hodnotou-2/</link>
      <pubDate>Tue, 14 Mar 2017 19:47:03 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/predavani-poli-slicu-hodnotou-2/</guid>
      <description>&lt;p&gt;Když jsme se bavili o slicech tak nezazněla jedna podstatná informace. Jak vlastně vypadá taková struktura slicu.&lt;/p&gt;&#xA;&lt;p&gt;Vytvořme si tedy slice.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;délka:&amp;#34;&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;maximální délka:&amp;#34;&lt;/span&gt;, cap(&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Délka i maximální délka jsou shodné, tedy 0.&lt;/p&gt;&#xA;&lt;p&gt;Teď si k danému slicu přidejme jedno položku a zkusme to znovu.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; []&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt; = append(&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;délka:&amp;#34;&lt;/span&gt;, len(&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;maximální délka:&amp;#34;&lt;/span&gt;, cap(&lt;span style=&#34;color:#a6e22e&#34;&gt;slice&lt;/span&gt;))&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Tentokrát je délka 1 a maximální délka je 2. Co to znamená? &lt;code&gt;append&lt;/code&gt; nám nejen přidal do pole jednu položku, ale také nám nechal ve slicu &amp;ldquo;fuku&amp;rdquo; pro jedno další číslo. Tzn. pokud přidáme další položku, tak nám &lt;code&gt;append&lt;/code&gt; nemusí zvětšovat pole, prostě přidá položku na konec již alokovaného pole.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Duck typing v #GO</title>
      <link>https://go.ondralinek.cz/post/duck-typing-v-go/</link>
      <pubDate>Wed, 25 Jan 2017 15:36:16 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/duck-typing-v-go/</guid>
      <description>&lt;p&gt;Možná už jste někdy slyšeli termín &amp;ldquo;&lt;code&gt;duck typing&lt;/code&gt;&amp;rdquo;. Pro ty co náhodou ne, tak jen krátce uvedu, že se jedná o aplikaci známého pořekadla &amp;ldquo;kváká to jako kachna, vypadá to jako kachna, tak je to kachna&amp;rdquo;.&lt;/p&gt;&#xA;&lt;p&gt;Představte si tyto dva typy.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Člověk&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;Jméno&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Mazlíček&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;Jméno&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Je jasné, že se jedné o dva typy. &lt;code&gt;Člověk&lt;/code&gt; a &lt;code&gt;Mazlíček&lt;/code&gt;. Oba jsou ovšem stejné - mají (sice jen jedno) pole - &lt;code&gt;Jméno&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jak na `Cannot read property &#39;substring&#39; of undefined` ve VS Code</title>
      <link>https://go.ondralinek.cz/post/jak-na-cannot-read-property-substring-of-undefined-ve-vs-code/</link>
      <pubDate>Tue, 10 Jan 2017 10:38:06 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/jak-na-cannot-read-property-substring-of-undefined-ve-vs-code/</guid>
      <description>&lt;p&gt;Pokud jako já používáte &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; pro práci s projekty v &lt;em&gt;Go&lt;/em&gt; tak jsme možná narazili na problém při formátování zdrojových souborů (standardně &lt;code&gt;cmd + alt + L&lt;/code&gt; na MacOs). Místo vytouženého zformátování se zobrazí&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;Cannot read property &#39;substring&#39; of undefined&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;Nuže problém je v chybějící prázdné řádce na konci souboru. Stačí tedy jen přidat na konec souboru jednu prázdnou řádku a problém je vyřešen.&lt;/p&gt;&#xA;&lt;p&gt;Např.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt; () {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;...&lt;/span&gt;.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#75715e&#34;&gt;// následuje prázdná řádka&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Více na &lt;a href=&#34;https://github.com/Microsoft/vscode-go/issues/690&#34;&gt;Githubu&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dnešní bleskovka - sady (množiny) v Golang</title>
      <link>https://go.ondralinek.cz/post/dnesni-bleskovka-sady-mnoziny-v-golang/</link>
      <pubDate>Tue, 10 Jan 2017 08:48:24 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/dnesni-bleskovka-sady-mnoziny-v-golang/</guid>
      <description>&lt;p&gt;Dnes opět jen telegraficky. &lt;em&gt;Go&lt;/em&gt; nepodporuje sady (množiny) a tak tu máme drobnou obezličku, jak si takovou sadu vytvořit. Využijeme toho, že mapy mají unikátní klíče a jsou netříděné. Že to zní povědomě? Ano! Vždyť to je přece množina.&lt;/p&gt;&#xA;&lt;p&gt;Takže než abychom si mazali ruce nějakým bastlením kódu si uděláme např. toto:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;package&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; (&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;fmt&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;main&lt;/span&gt;() {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;množinaIntů&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{}{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;množinaIntů&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{}{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;množinaIntů&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{}{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;množinaIntů&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{}{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;množinaIntů&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{}{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;množinaIntů&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;] = &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt;{}{}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// jen si mapu prosvištíme, ať víme co v ní je&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;range&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;množinaIntů&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Položka množiny:&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;key&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#75715e&#34;&gt;// zjištění jestli množina obsahuje položku&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;množinaIntů&lt;/span&gt;[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]; &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Množina obsahuje položku 1.&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Padl tu dotaz, proč je použit typ &lt;code&gt;map[int]struct{}&lt;/code&gt;. Tedy mapu s klíčem &lt;code&gt;int&lt;/code&gt; a položkami typu prázdná struktura. Důvod je prostý, prázdná struktura zabírá (logicky) v paměti 0 bajtů.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Jak fungují Go rutiny</title>
      <link>https://go.ondralinek.cz/post/jak-funguji-go-rutiny/</link>
      <pubDate>Thu, 05 Jan 2017 11:17:19 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/jak-funguji-go-rutiny/</guid>
      <description>&lt;p&gt;Dnes si povíme něco o &lt;em&gt;Go&lt;/em&gt; rutinách. Všichni víme, že se používají, pokud chceme pracovat paralelně. Všichni určitě i víme, že &lt;em&gt;Go&lt;/em&gt; rutiny nejsou thready (vlákna). Co tedy jsou &lt;em&gt;Go&lt;/em&gt; rutiny a proč se používají?&lt;/p&gt;&#xA;&lt;p&gt;Prvně, proč &lt;em&gt;Go&lt;/em&gt; nepoužívá vlákna? &lt;em&gt;Go&lt;/em&gt; vlákna používá, ale nepoužívá je 1:1 ke &lt;em&gt;Go&lt;/em&gt; rutinám. Vlákno, jakkoliv se používají často, je má svoji režii. Režii na úrovni operačního systému (je to OS, kdo vlákna vytváří), režii na úrovni správy (je potřeba vlákna časovat a přepínat) a režii na úrovni paměti a registrů procesoru (je potřeba při přepínání vlákna ukládat prakticky všechny registry procesoru). Jak je zřejmé, pokud bychom chtěli mít tisíce Go rutin, tak by režie OS byla natolik veliká, že by se systém zhroutil.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Porovnání jazyků založených na C</title>
      <link>https://go.ondralinek.cz/post/porovnani-jazyku-zalozenych-na-c/</link>
      <pubDate>Fri, 09 Dec 2016 07:37:02 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/porovnani-jazyku-zalozenych-na-c/</guid>
      <description>&lt;p&gt;Na serveru &lt;a href=&#34;https://eev.ee/blog/2016/12/01/lets-stop-copying-c/&#34;&gt;eev.ee&lt;/a&gt; vyšel zajímavý článek na téma programovacích jazyků. Všímá si především &amp;ldquo;dědictví&amp;rdquo;, které si jazyky odnáší od svého prapředka &lt;em&gt;C&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Řekl bych, že &lt;em&gt;Go&lt;/em&gt; si vede velmi dobře. Samozřejmě že není ideální, což je dané také tím, že jazyk lze hodnotit pouze subjektivně, ale vlastnosti jako vícenásobné návratové hodnoty, &lt;code&gt;switch&lt;/code&gt; bez &lt;code&gt;break&lt;/code&gt; apod. autora zaujali. Posuďte sami!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Něco málo o pointerech</title>
      <link>https://go.ondralinek.cz/post/neco-malo-o-pointerech/</link>
      <pubDate>Mon, 07 Nov 2016 16:36:40 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/neco-malo-o-pointerech/</guid>
      <description>&lt;p&gt;Dnes jsem si uvědomil jednu věc. V &lt;em&gt;Go&lt;/em&gt; se to množí pointery, ale vlastně mnozí čtenáři tohoto blogu, kteří přicházejí ke &lt;em&gt;Go&lt;/em&gt; ze světa JavaScriptu, Javy a dalších jazyků bez pointerů (v Česku známé také jako ukazatele), mohou být mírně zmatení, o čem to tu stále hovořím.&lt;/p&gt;&#xA;&lt;p&gt;Než se pustím do dalších příkladů, tak jen ve zkratce pro znalce &lt;em&gt;C&lt;/em&gt; a podobných jazyků, které pointery mají. V &lt;em&gt;Go&lt;/em&gt; se vždy přenášejí parametry hodnotou. A to včetně hodnoty pointerů. Rozumíme si :-)&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chyby se stacktrace v #Go</title>
      <link>https://go.ondralinek.cz/post/chyby-se-stacktrace-v-go/</link>
      <pubDate>Thu, 03 Nov 2016 11:27:03 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/chyby-se-stacktrace-v-go/</guid>
      <description>&lt;p&gt;Snad každý kdo přichází do světa &lt;em&gt;Go&lt;/em&gt; ze světa Javy se diví, proč chyby v &lt;em&gt;Go&lt;/em&gt; nemají stacktrace. Vždyť přeci chci vědět kde se chyba stala. A mají pravdu, standardní chyby v &lt;em&gt;Go&lt;/em&gt; stacktrace nemají. Ale to není proto, že by autoři &lt;em&gt;Go&lt;/em&gt; byli snad sadisti, co se vyžívají ve zmatení uživatelů jazyka. Je to proto, že v &lt;em&gt;Go&lt;/em&gt; jsou chyby jen interfacy. Tzn. cokoliv co implementuje interface &lt;code&gt;error&lt;/code&gt; je automaticky chybou. A vzhledem k tomu, že interface &lt;code&gt;error&lt;/code&gt; má jen jednu  funkci &lt;code&gt;Error() string&lt;/code&gt;, tak je jeho implementace více než jednoduchá.&lt;/p&gt;</description>
    </item>
    <item>
      <title>if-else-if-else v #Go</title>
      <link>https://go.ondralinek.cz/post/if-else-if-else-v-go/</link>
      <pubDate>Wed, 02 Nov 2016 08:37:54 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/if-else-if-else-v-go/</guid>
      <description>&lt;p&gt;Ve většině jazyků z rodiny &lt;em&gt;C&lt;/em&gt; se větvění provádí pomocí &lt;code&gt;if-else&lt;/code&gt;. Klasicky to funguje (např. v &lt;em&gt;Go&lt;/em&gt;) takto.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cosi&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dalsiCosi&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cosi je větší než dalsiCosi.&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;cos je menší než dalsiCosi.&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Takto to funguje dobře. Co když ale chceme naspat něco většího?&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cosi&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dalsiCosi&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Weekday&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Monday&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Je pondělí a cosi je větší než dalsiCosi.&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cosi&lt;/span&gt; &amp;gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;dalsiCosi&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Weekday&lt;/span&gt;() &lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;time&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Tuesday&lt;/span&gt;  {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Je úterý a cosi je větší než dalsiCosi.&amp;#34;&lt;/span&gt;)   &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;log&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Není pondělí a úterý, nebo cosi je menší než dalsiCosi, nebo tak něco v tom smyslu.&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;Go&lt;/em&gt; ovšem nabízí tuto variantu namísto sestavy &lt;code&gt;if-else-if-else&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Objektové programování vs. #Golang</title>
      <link>https://go.ondralinek.cz/post/objektove-programovani-vs-golang/</link>
      <pubDate>Mon, 24 Oct 2016 19:15:30 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/objektove-programovani-vs-golang/</guid>
      <description>&lt;p&gt;Dnes se podíváme na &lt;em&gt;Go&lt;/em&gt; tak trochu filozoficky. Je, nebo není &lt;em&gt;Go&lt;/em&gt; objektový jazyk, jak v tomto smyslu vypadá jeho srovnání se v současnosti nejpopulárnějším jazykem Java?&lt;/p&gt;&#xA;&lt;p&gt;&lt;em&gt;Go&lt;/em&gt; je opravdu tak trochu jako chytrá horákyně. Je funkcionální, ale ne zcela, je objektový, ale ne zcela. Než začne polemizovat o objektovosti &lt;em&gt;Go&lt;/em&gt;, pojďme si připomenout, co dělá jazyk objektovým.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Třídy a objekty. Vše jsou objekty a objekty jsou instance tříd.&lt;/li&gt;&#xA;&lt;li&gt;Zapouzdření. Data a operace nad daty jedno jsou.&lt;/li&gt;&#xA;&lt;li&gt;Dědičnost. Třídy dědí svoje vlastnosti a potomek třídy je specializací svého rodiče.&lt;/li&gt;&#xA;&lt;li&gt;Polymorfismus. Potomek dovede nahradit svého předka.&lt;/li&gt;&#xA;&lt;li&gt;Přetěžování. Metoda může mít stejné jméno, ale jiné parametry.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Nuže. &lt;em&gt;Go&lt;/em&gt; nemá třídy a objekty. Má ovšem struktury a funkce, které nad nimi operují, tzv. přijímače (receivers). Jelikož volání přijímače nad strukturou se označuje operátorem tečky, tak to v kódu vypadá stejně, jako např. v Javě.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Zjištění, jestli mapa obsahuje klíč</title>
      <link>https://go.ondralinek.cz/post/zjisteni-jestli-mapa-obsahuje-klic/</link>
      <pubDate>Thu, 20 Oct 2016 08:05:29 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/zjisteni-jestli-mapa-obsahuje-klic/</guid>
      <description>&lt;p&gt;Každý potřebujeme čas od času zjistit, jestli je v mapě položka pod daným klíčem. V &lt;em&gt;Go&lt;/em&gt; se to dělá velmi jednoduše.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;mapa&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;map&lt;/span&gt;[&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;{&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;položka1&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;hodnota1&amp;#34;&lt;/span&gt;,&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hodnota1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mapa&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;položka1&amp;#34;&lt;/span&gt;]; &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Hurá, mapa má klíč &amp;#39;položka1&amp;#39;: [%s]\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;hodnota1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;hodnota2&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;mapa&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;položka2&amp;#34;&lt;/span&gt;]; !&lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bohužel, klíč &amp;#39;položka2&amp;#39; není v mapě. Posuďte sami: [%#v], [%s]&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;mapa&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;hodnota2&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Mimochodem, podobný postup se používá i v situaci, kdy si chcete ověřit typ proměnné.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;cokoliv&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt;{}(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cokoliv&lt;/span&gt;.(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sláva, cokoliv je int!&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;cokoliv&lt;/span&gt;.(&lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;); &lt;span style=&#34;color:#a6e22e&#34;&gt;ok&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Sláva, cokoliv je string!&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;} &lt;span style=&#34;color:#66d9ef&#34;&gt;else&lt;/span&gt; {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Bohužel cokoliv není string&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>Pracujeme s poli</title>
      <link>https://go.ondralinek.cz/post/pracujeme-s-poli/</link>
      <pubDate>Mon, 17 Oct 2016 11:27:00 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/pracujeme-s-poli/</guid>
      <description>&lt;p&gt;Práce s poli patří k základům prakticky všeho. Pokud mám něčeho více jak jedna, tak se z toho stává pole.&#xA;Běžně rozlišujeme tři typy polí:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;obyčejné pole. V &lt;em&gt;Go&lt;/em&gt; se deklaruje jako &lt;code&gt;[n]T&lt;/code&gt; např.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;pole&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; [&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Všimněte si, že &lt;code&gt;pole&lt;/code&gt; je typu &lt;code&gt;[10]int&lt;/code&gt;. Tzn. velikost pole se nedá změnit. Pokud tedy předem víte, kolik&#xA;prvků potřebujete a nechcete aby se to dalo změnit, pak je pole právě pro vás.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;seznam. V &lt;em&gt;Go&lt;/em&gt; se mu říká &lt;code&gt;slice&lt;/code&gt;. Deklaruje se jako &lt;code&gt;[]T&lt;/code&gt; např. &lt;code&gt;[]int&lt;/code&gt;. Pokud chcete, můžete si u něj nastavit jeho&#xA;počáteční kapacitu. Ovšem nikoliv při deklaraci, ale při inicializaci. Tedy např.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;seznam&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; make([]&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// počáteční velikost pole je 10&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;&#xA;&lt;li&gt;množina. Mnoho jazyků přímo podporuje množiny, anlicky &lt;code&gt;set&lt;/code&gt;. &lt;em&gt;Go&lt;/em&gt; mezi takové jazyky nepatří, a tak musíte vzít za vděk&#xA;nějakou knihovnou , která tuto funkcionalitu nabízí. Jen pro přesnost, množiny nejsou setříděné a neumožňují duplikáty.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Teď nejběžnějši operace nad poli, nebo slicy. Prvně si pole vytvoříme.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Větvení podle typu proměnné v #Golang</title>
      <link>https://go.ondralinek.cz/post/vetveni-podle-typu-promenne-v-golang/</link>
      <pubDate>Thu, 13 Oct 2016 05:34:53 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/vetveni-podle-typu-promenne-v-golang/</guid>
      <description>&lt;p&gt;Někdy je potřeba si větvit program podle toho, jakého je proměnná typu. Typický příklad je &lt;code&gt;interface{}&lt;/code&gt;. Jelikož se jedná o prázdný interface, tak jím může být cokoliv. Co když ale chcete jinak pracovat s &lt;code&gt;int&lt;/code&gt; a jinak se &lt;code&gt;string&lt;/code&gt;?&lt;/p&gt;&#xA;&lt;p&gt;Následující příklad vám to ukáže.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;proměnná&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;inteface&lt;/span&gt;{}(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// přetypujeme int 1 na interface{}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;switch&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;proměnná&lt;/span&gt;.(&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt;) { &lt;span style=&#34;color:#75715e&#34;&gt;// podle typu proměnné&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Je to int!&amp;#34;&lt;/span&gt;) &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;default&lt;/span&gt;:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#x9;&lt;span style=&#34;color:#a6e22e&#34;&gt;printString&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Je to záhada&amp;#34;&lt;/span&gt;)     &#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Jak vidno, prosté.&lt;/p&gt;</description>
    </item>
    <item>
      <title>#Golang a multithreading</title>
      <link>https://go.ondralinek.cz/post/golang-a-multithreading/</link>
      <pubDate>Sun, 09 Oct 2016 07:19:14 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/golang-a-multithreading/</guid>
      <description>&lt;p&gt;Tento článek jsem si nechával na slavnostní chvíle a ta zrovna přišla. Dnes si povíme o to paralelismu v &lt;em&gt;Go&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;V první řadě, co je to multithreading? Je to schopnost programu, dělat několik věcí najednou. Tedy například stáhnout stránku a číst z terminálu. Řeknete si, to přeci není problém, jen co uživatel stiskne tlačítko, tak prostě na konzoli vypíšu co, napsal. Třeba následovně.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Print&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;Napiš něco: &amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Scanln&lt;/span&gt;(&lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Println&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;input&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;http&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Get&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;http://www.google.cz/&amp;#34;&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;_&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;err&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;io&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Copy&lt;/span&gt;(&lt;span style=&#34;color:#a6e22e&#34;&gt;os&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Stdout&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;   &lt;span style=&#34;color:#a6e22e&#34;&gt;resp&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Body&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Close&lt;/span&gt;()&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Samozřejmě to takhle jde, ale je to když budete chtít ještě během toho vypisovat např. aktuální čas? Nebo ukazovat, jak píše jiný uživatel na jiném počítači. Nakonec skončíte u nějaké podobné smyčky.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bleskovka o ukazatelých na interface</title>
      <link>https://go.ondralinek.cz/post/bleskovka-o-ukazatelych-na-interface/</link>
      <pubDate>Fri, 30 Sep 2016 11:00:50 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/bleskovka-o-ukazatelych-na-interface/</guid>
      <description>&lt;p&gt;Dnes si dáme první bleskovou zprávu.&lt;/p&gt;&#xA;&lt;p&gt;### Nepoužívejte v kódu ukazatel (pointer) na interface.&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Důvod.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Jakákoliv struktura, která implementuje interface, jej implementuje jak jako samotná struktura, tak jako ukazatel na strukturu.&lt;/p&gt;&#xA;&lt;p&gt;Jen si musíte dát pozor na &lt;code&gt;příjemce&lt;/code&gt; (receivery). Pokud příjemce předpokládá ukazatel (pointer), tak musíte volat daný příjemce na ukazateli. V následujícím příkladu je vidět, jak příjemce implementuje funkci &lt;code&gt;Funkce&lt;/code&gt; na ukazateli a tím pádem je potřeba použít k jeho volání &lt;code&gt;iface1 = &amp;amp;Secti{}&lt;/code&gt;. Tedy dereferencovat ukazatel na strukturu &lt;code&gt;Secti&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>#Golang a přístup k databázi</title>
      <link>https://go.ondralinek.cz/post/golang-a-pristup-k-databazi/</link>
      <pubDate>Tue, 27 Sep 2016 05:31:55 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/golang-a-pristup-k-databazi/</guid>
      <description>&lt;p&gt;V dnešní době nad neexistuje aplikace, která by nepřistupovala do databáze. Samozřejmě si můžeme ukládat data do souboru a mnohdy je to i efektivnější řešení, ale databáze nám luxusně umožní data ukládat a načítat a nestarat se přitom o detaily. V dnešní době rozdělujeme databáze do 2 proudů.&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;SQL databáze (nebo také relační databáze) - tedy databáze, kde jsou data ukládána jako relace mezi entitami. Většina z nich také garantuje ACID (atomičnost operací, konzistenci stav, integritu dat a durabilitu uložení). Mezi nejznámější patři &lt;a href=&#34;https://www.mysql.com/&#34;&gt;MySql&lt;/a&gt;, &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt;, &lt;a href=&#34;https://www.oracle.com/database/index.html&#34;&gt;Oracle&lt;/a&gt;, MS SQL Server atd.&lt;/li&gt;&#xA;&lt;li&gt;NoSQL databáze - tedy databáze, které nevyžadují  striktní schéma (ad hoc ukládání dat) místo ACID používají &lt;a href=&#34;https://en.wikipedia.org/wiki/Eventual_consistency&#34;&gt;BASE&lt;/a&gt; (pouze základní dostupnost, měnící se (měkký) stav a eventuální konzistenci) - což samo osobě je slovní hříčka - prostě kyselost a zásaditost :-). Představily jsou &lt;a href=&#34;https://www.mongodb.com/&#34;&gt;MongoDB&lt;/a&gt;, &lt;a href=&#34;http://redis.io/&#34;&gt;Redis&lt;/a&gt;, &lt;a href=&#34;http://cassandra.apache.org/&#34;&gt;Apache Cassandra&lt;/a&gt;, &lt;a href=&#34;https://www.elastic.co/products/elasticsearch&#34;&gt;ElesticSearch&lt;/a&gt; apod.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Dnes si povíme, jak přistupovat k SQL databázím. Už proto, že &lt;em&gt;Go&lt;/em&gt; tyto databáze standardizuje, na rozdíl od NoSQL, kde standard není.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Testujeme v #Golang (část 2)</title>
      <link>https://go.ondralinek.cz/post/testujeme-v-golang-cast-2/</link>
      <pubDate>Sat, 24 Sep 2016 11:56:57 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/testujeme-v-golang-cast-2/</guid>
      <description>&lt;p&gt;V první části povídání o testování jsme si ukázali vcelku jednoduchý test a spustili jsme si jej.&lt;/p&gt;&#xA;&lt;p&gt;Jedním z požadavků na testování je, aby testy doběhly co nejdříve. Je to proto, že chceme mít smyčku zpětné vazby co nejkratší. Nikdo nestojí o to, aby čekal více jak minutu na informaci, že je všechno v pořádku. Ale pak se naskytuje otázka - co v případě, že test závisí na něčem pomalém. Třeba databázi. Nebo volání externí služby přes HTTP. V tom případě tu máme celou plejádu možností a podíváme se na ně.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Testujeme v #Golang (část 1)</title>
      <link>https://go.ondralinek.cz/post/testujeme-v-golang-cast-1/</link>
      <pubDate>Wed, 21 Sep 2016 06:08:12 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/testujeme-v-golang-cast-1/</guid>
      <description>&lt;p&gt;Testování pro mnoho lidí (včetně mě) není nic zábavného, ale po letech programování připouštím, že je lehčí mít pořádné testy, než neustále kompilovat a spouštět aplikaci a pomocí debuggeru se snažit pochopit, co je špatně. Už ta ztráta času. I když je &lt;em&gt;Go&lt;/em&gt; hodně rychlé, kompilace pořád představuje pár vteřin, následně spustit aplikaci, dostat na místo, kde si chcete něco ověřit a následně konečně to ověřit. Mnohdy to vyžaduje např. zásahy do databáze, otevírání browseru a navigace na stránky apod. Prostě a jednoduše, je to  neefektivní. A hlavně, jsme programátoři, automatizujeme co se dá!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kompilace #Golang v Dockeru</title>
      <link>https://go.ondralinek.cz/post/kompilace-golang-v-dockeru/</link>
      <pubDate>Sat, 17 Sep 2016 09:07:31 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/kompilace-golang-v-dockeru/</guid>
      <description>&lt;p&gt;Tentokrát kratší vsuvka.&lt;/p&gt;&#xA;&lt;p&gt;Potřeboval jsem na svém  Macovi zkompilovat program pro 🐧 Linux. Samozřejmě mě jako první napadl cross compiler, ale to není ono. Nehledě na to, že bych pak stejně nemohl program vyzkoušet. Samozřejmě by s trochou cviku šlo zkusit nějaký VirtualBox apod., ale mě napadlo elegantnější řešení - &lt;a href=&#34;https://www.docker.com&#34;&gt;Docker&lt;/a&gt;!&lt;/p&gt;&#xA;&lt;p&gt;Nejdřív si nainstalujete na počítač docker - podívejte se na &lt;a href=&#34;https://www.docker.com/products/overview&#34;&gt;instalační stránky&lt;/a&gt; a vyberte si instalaci podle svého systému. V ideálním případě by toto mělo fungovat:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Konfigurace programu v #Golang</title>
      <link>https://go.ondralinek.cz/post/konfigurace-programu-v-golang/</link>
      <pubDate>Wed, 14 Sep 2016 17:33:13 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/konfigurace-programu-v-golang/</guid>
      <description>&lt;p&gt;Dnes si povíme něco o tom, jak si nakonfigurovat takový program v &lt;em&gt;Go&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Konfigurací zde myslím způsob, jak předat programu parametry, aby mohl běžet nezávisle. V zásadě máte několik možností a pojďme si o nich povědět detailněji.&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;parametry příkazové řádky&lt;/li&gt;&#xA;&lt;li&gt;pomocí proměnných prostředí&lt;/li&gt;&#xA;&lt;li&gt;databáze&lt;/li&gt;&#xA;&lt;li&gt;specializované programy&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;Tento výčet není konečný, ale prozatím si s ním vystačíme.&lt;/p&gt;&#xA;&lt;h3 id=&#34;příkazová-řádka&#34;&gt;Příkazová řádka&lt;/h3&gt;&#xA;&lt;p&gt;Podívejme se na první možnost, parametry na příkazové řádce.&lt;/p&gt;&#xA;&lt;p&gt;Pro tento případ má &lt;em&gt;Go&lt;/em&gt; package &lt;code&gt;flags&lt;/code&gt;. Možná už jste si sami všimli, že na rozdíl od jazyků odvozených od &lt;em&gt;C&lt;/em&gt; (&lt;em&gt;C&lt;/em&gt;, &lt;em&gt;C++&lt;/em&gt;, &lt;em&gt;Java&lt;/em&gt; apod.) tu funkce &lt;code&gt;main&lt;/code&gt; nepřijímá pole parametrů. Pro připomenutí, takto vypadá &lt;code&gt;main&lt;/code&gt; v &lt;em&gt;Go&lt;/em&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>#Golang a Git</title>
      <link>https://go.ondralinek.cz/post/golang-a-git/</link>
      <pubDate>Mon, 12 Sep 2016 19:02:00 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/golang-a-git/</guid>
      <description>&lt;p&gt;Čas od času budete potřebovat svoje dílo uložit někam jinam, než na svůj počítač. Mnozí budou dokonce pomýšlet na sdílení svého kódu s ostatními např. na &lt;a href=&#34;www.github.com&#34;&gt;githubu&lt;/a&gt;. K tomu je samozřejmě nejpříhodnější použít &lt;code&gt;git&lt;/code&gt;. A jak nejlépe na to?&lt;/p&gt;&#xA;&lt;p&gt;V první řadě je potřeba mít nainstalovaný git. Majitelé maců to mají jednoduché, tam je většinou git hned v základu. Ostatní si nainstalují git buď pomocí &lt;code&gt;apt-get&lt;/code&gt;, nebo &lt;code&gt;yum&lt;/code&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Nyní máte dvě možnosti. Už jste si napsali nějaký kód a chcete ho dát např. na github, nebo jste ještě nic nenapsali, ale chcete kód (který teprve napíšete) např. na github.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Struktura programu po druhé</title>
      <link>https://go.ondralinek.cz/post/struktura-programu-po-druhe/</link>
      <pubDate>Wed, 07 Sep 2016 20:34:34 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/struktura-programu-po-druhe/</guid>
      <description>&lt;p&gt;Jak se říká, žádný člověk není ostrov, tak ani žádný program není ostrov. Programy závisí na knihovnách jazyka a na dalších knihovnách. &lt;em&gt;Go&lt;/em&gt; řeší tedy dva problémy. Jak závislost získat a jak závislost použít.&lt;/p&gt;&#xA;&lt;p&gt;Aby mohlo &lt;em&gt;Go&lt;/em&gt; závislost získat, musí vědět, kde se závislost nachází. A k tomu slouží právě posledně zmiňované jméno package. Pokud máme např. package &lt;code&gt;github.com/stretchr/testify&lt;/code&gt;, tak je naprosto zřejmé, že ji můžeme stáhnout z &lt;a href=&#34;https://github.com/stretchr/testify&#34;&gt;githubu&lt;/a&gt;. &lt;em&gt;Go&lt;/em&gt; nám v tom ale rádo pomůže. Stačí jen říct &lt;code&gt;go get github.com/stretchr/testify&lt;/code&gt; a závislost je v našem &lt;code&gt;GOPATH&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vývoj v #Golang</title>
      <link>https://go.ondralinek.cz/post/vyvoj-v-golang/</link>
      <pubDate>Wed, 07 Sep 2016 17:38:37 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/vyvoj-v-golang/</guid>
      <description>&lt;p&gt;Jelikož už známe syntaxi jazyka a umíme napsat např. &lt;code&gt;Hello world&lt;/code&gt;, tak nastává čas si říct něco o tom, jak si nakonfigurovat prostředí, abychom mohli pracovat s &lt;em&gt;Go&lt;/em&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Instalace je jednoduchá. Pokud jste na Macovi, pak doporučuji použít &lt;code&gt;homebrew&lt;/code&gt;, i když si můžete stáhnout instalačky. Linux je podobný, &lt;code&gt;yum&lt;/code&gt; nebo &lt;code&gt;apt&lt;/code&gt; vám zajisté pomohou. Co se Windows týče, tam bohužel sloužit nemohu, ale na vlastní oči jsem viděl &lt;em&gt;Go&lt;/em&gt; běžet na Windows, tak to určitě půjde.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Naučte se Go za Y minut</title>
      <link>https://go.ondralinek.cz/post/naucte-se-go-za-y-minut/</link>
      <pubDate>Tue, 06 Sep 2016 05:57:06 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/naucte-se-go-za-y-minut/</guid>
      <description>&lt;p&gt;Jazyk Go byl vytvořen, jelikož bylo potřeba dokončit práci. Není to poslední&#xA;trend ve světě počítačové vědy, ale je to nejrychlejší a nejnovější způsob,&#xA;jak řešit realné problémy.&lt;/p&gt;&#xA;&lt;p&gt;Go používá známé koncepty imperativních jazyků se statickým typováním.&#xA;Rychle se kompiluje a také rychle běží. Přidává snadno pochopitelnou&#xA;podporu konkurenčnosti, což umožňuje využít výhody multi-core procesorů a&#xA;jazyk také obsahuje utility, které pomáhají se škálovatelným programováním.&lt;/p&gt;&#xA;&lt;p&gt;Go má již v základu vynikající knihovnu a je s ním spojená nadšená komunita.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Proč jazyk Go</title>
      <link>https://go.ondralinek.cz/post/proc-jazyk-go/</link>
      <pubDate>Tue, 30 Aug 2016 20:50:18 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/proc-jazyk-go/</guid>
      <description>&lt;p&gt;Než si povíme, proč programovat v &lt;em&gt;Go&lt;/em&gt; a ne třeba v &lt;em&gt;Java&lt;/em&gt;, tak odkaz na informace o jazyku &lt;em&gt;Go&lt;/em&gt; na &lt;a href=&#34;https://cs.wikipedia.org/wiki/Go_(programovac%C3%AD_jazyk)&#34;&gt;wikipedia&lt;/a&gt;.&lt;/p&gt;&#xA;&lt;p&gt;Po této trošce suché teorie něco praxe. Programovací jazyky se dělí do několika skupin. V rámci nich &lt;em&gt;Go&lt;/em&gt; zapadá do těchto:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;kompilovaný - programy v &lt;em&gt;Go&lt;/em&gt; se musí před během kompilovat, na rozdíl od jazyků typu &lt;em&gt;JavaScript&lt;/em&gt;, nebo &lt;em&gt;Python&lt;/em&gt;&lt;/li&gt;&#xA;&lt;li&gt;nativní - programy v &lt;em&gt;Go&lt;/em&gt; se kompilují do nativního kódu. Programy tedy nepotřebují běhové prostředí, jako např. &lt;em&gt;Java&lt;/em&gt; (ta má JVM), nebo &lt;em&gt;.net&lt;/em&gt; (ten má .net framework)&lt;/li&gt;&#xA;&lt;li&gt;silně typovaný - program psaný v &lt;em&gt;Go&lt;/em&gt; může použít pouze typy známé v době kompilace. To je rozdíl proti např. &lt;em&gt;JavaScript&lt;/em&gt;, kde jsou typy známi až v době spuštění.&lt;/li&gt;&#xA;&lt;li&gt;strukturální - typy nemusí uvádět, s jakým typem jsou kompatibilní. Třeba &lt;em&gt;Java&lt;/em&gt; jakožto nominální jazyk toto musí uvádět (&lt;code&gt;class b extends a&lt;/code&gt;)&lt;/li&gt;&#xA;&lt;li&gt;funkcionální - v &lt;em&gt;Go&lt;/em&gt; jsou funkce občany první kategorie. Funkce mohou přijímat funkce jako parametr a také je vracet. Toto např. &lt;em&gt;Java&lt;/em&gt; do verze 8 neuměla.&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;Když tedy víme, co je &lt;em&gt;Go&lt;/em&gt; zač, tak důvody proč si zvolit &lt;em&gt;Go&lt;/em&gt;:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vše začalo Hello World</title>
      <link>https://go.ondralinek.cz/post/vse-zacalo-hello-world/</link>
      <pubDate>Tue, 30 Aug 2016 18:43:14 +0000</pubDate>
      <guid>https://go.ondralinek.cz/post/vse-zacalo-hello-world/</guid>
      <description>&lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-language-go&#34; data-lang=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;  &amp;#34;fmt&amp;#34;&#xA;)&#xA;&#xA;func main() {&#xA;  fmt.Println(&amp;#34;Hello world&amp;#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;A to je vše. Pokud si chcete kód vyzkoušet, tak zkuste &lt;a href=&#34;https://play.golang.org/p/xtFNtF7ZmR&#34;&gt;https://play.golang.org/p/xtFNtF7ZmR&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
